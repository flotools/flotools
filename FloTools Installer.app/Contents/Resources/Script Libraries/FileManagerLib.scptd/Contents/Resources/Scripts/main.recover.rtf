{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Verdana-Bold;\f1\fnil\fcharset0 Verdana;\f2\fnil\fcharset0 Verdana-Italic;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red108\green5\blue211;\red0\green0\blue255;
\red76\green78\blue78;\red64\green128\blue0;\red251\green0\blue7;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c42337\c1841\c82833;\csgenericrgb\c0\c0\c100000;
\csgenericrgb\c29999\c30457\c30457;\csgenericrgb\c25000\c50001\c0;\cssrgb\c100000\c0\c0;}
\deftab480
\pard\pardeftab480\slleading40\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 use
\f1\b0  \cf3 AppleScript\cf2  \cf4 version\cf2  "2.4"\
\pard\pardeftab480\slleading40\pardirnatural\partightenfactor0

\f0\b \cf2 use
\f1\b0  
\f2\i \cf4 framework
\f1\i0 \cf2  "Foundation"\
\
\cf5 -- classes, constants, and enums used\cf2 \

\f0\b property
\f1\b0  \cf6 NSURLVolumeURLKey\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLVolumeURLKey\cf2 \

\f0\b property
\f1\b0  \cf6 NSURLContentAccessDateKey\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLContentAccessDateKey\cf2 \

\f0\b property
\f1\b0  \cf6 NSURLCreationDateKey\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLCreationDateKey\cf2 \

\f0\b property
\f1\b0  \cf6 NSURLAddedToDirectoryDateKey\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLAddedToDirectoryDateKey\cf2 \

\f0\b property
\f1\b0  \cf6 NSURLNameKey\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLNameKey\cf2 \

\f0\b property
\f1\b0  \cf6 NSSortDescriptor\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSSortDescriptor\cf2 \

\f0\b property
\f1\b0  \cf6 NSURLContentModificationDateKey\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLContentModificationDateKey\cf2 \

\f0\b property
\f1\b0  \cf6 NSMutableArray\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSMutableArray\cf2 \

\f0\b property
\f1\b0  \cf6 NSURLIsDirectoryKey\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLIsDirectoryKey\cf2 \

\f0\b property
\f1\b0  \cf6 |NSURL|\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 |NSURL|\cf2 \

\f0\b property
\f1\b0  \cf6 NSFileManager\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSFileManager\cf2 \

\f0\b property
\f1\b0  \cf6 NSURLIsPackageKey\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLIsPackageKey\cf2 \

\f0\b property
\f1\b0  \cf6 NSURLPathKey\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLPathKey\cf2 \

\f0\b property
\f1\b0  \cf6 NSArray\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSArray\cf2 \

\f0\b property
\f1\b0  \cf6 NSString\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSString\cf2 \

\f0\b property
\f1\b0  \cf6 NSURLTagNamesKey\cf2  : 
\f0\b a reference
\f1\b0  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLTagNamesKey\cf2 \
\

\f0\b property
\f1\b0  \cf6 copyString\cf2  : " copy" \cf5 -- added to file names for copies; edit to suit your language\cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 create duplicate of
\f1\b0 \cf2  \cf6 aFileOrPath\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 duplicateItem\cf2 :\cf6 aFileOrPath\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 create duplicate of
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 copy object
\f1\b0 \cf2  \cf6 aFileOrPath\cf2  \cf4 to folder\cf2  \cf6 folderOrPath\cf2  \cf4 replacing\cf2  \cf6 replaceFlag\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2  \cf4 new name\cf2  \cf6 destName\cf2  : 
\f2\i \cf4 missing value
\f1\i0 \cf2  \cf4 return path\cf2  \cf6 pathFlag\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 copyWithResultItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 intoFolder\cf2 :\cf6 folderOrPath\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2  \cf7 newName\cf2 :\cf6 destName\cf2  \cf7 withReturnPath\cf2 :\cf6 pathFlag\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 copy object
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 move object
\f1\b0 \cf2  \cf6 aFileOrPath\cf2  \cf4 to folder\cf2  \cf6 folderOrPath\cf2  \cf4 replacing\cf2  \cf6 replaceFlag\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2  \cf4 new name\cf2  \cf6 destName\cf2  : 
\f2\i \cf4 missing value
\f1\i0 \cf2  \cf4 return path\cf2  \cf6 pathFlag\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 moveWithResultItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 intoFolder\cf2 :\cf6 folderOrPath\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2  \cf7 newName\cf2 :\cf6 destName\cf2  \cf7 withReturnPath\cf2 :\cf6 pathFlag\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 move object
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 remove object
\f1\b0 \cf2  \cf6 aFileOrPath\cf2  \cf4 folders included\cf2  \cf6 foldersFlag\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2 \
	
\f0\b if
\f1\b0  \cf6 foldersFlag\cf2  
\f0\b then
\f1\b0 \
		
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 deleteItem\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b else
\f1\b0 \
		
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 deleteFile\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \

\f0\b end
\f1\b0  
\f0\b \cf4 remove object
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 trash object
\f1\b0 \cf2  \cf6 aFileOrPath\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 trashItem\cf2 :\cf6 aFileOrPath\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 trash object
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 rename object
\f1\b0 \cf2  \cf6 aFileOrPath\cf2  \cf4 to name\cf2  \cf6 proposedName\cf2  \cf4 return path\cf2  \cf6 pathFlag\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2 \
	
\f0\b if
\f1\b0  \cf6 pathFlag\cf2  
\f0\b then
\f1\b0 \
		
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 renameWithResultItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 newName\cf2 :\cf6 proposedName\cf2 \
	
\f0\b else
\f1\b0 \
		
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 renameItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 newName\cf2 :\cf6 proposedName\cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \

\f0\b end
\f1\b0  
\f0\b \cf4 rename object
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 create alias to
\f1\b0 \cf2  \cf6 originalFileOrPath\cf2  \cf4 at\cf2  \cf6 aFileOrPath\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 createAlias\cf2 :\cf6 aFileOrPath\cf2  \cf7 pointingTo\cf2 :\cf6 originalFileOrPath\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 create alias to
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 find original of
\f1\b0 \cf2  \cf6 aFileOrPath\cf2  \cf4 returning file\cf2  \cf6 fileFlag\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 originalFromAlias\cf2 :\cf6 aFileOrPath\cf2  \cf7 asFile\cf2 :\cf6 fileFlag\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 find original of
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 create folder at
\f1\b0 \cf2  \cf6 folderOrPath\cf2  \cf4 use name\cf2  \cf6 proposedName\cf2  : 
\f2\i \cf4 missing value
\f1\i0 \cf2 \
	
\f0\b if
\f1\b0  \cf6 proposedName\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 createFolder\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b else
\f1\b0 \
		
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 createFolderNamed\cf2 :\cf6 proposedName\cf2  \cf7 inFolder\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \

\f0\b end
\f1\b0  
\f0\b \cf4 create folder at
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 sort objects
\f1\b0 \cf2  \cf6 listOfFilesOrPaths\cf2  \cf4 low to high\cf2  \cf6 ascendFlag\cf2  : 
\f2\i \cf3 true
\f1\i0 \cf2  \cf4 sorted property\cf2  \cf6 sortProp\cf2  : 
\f2\i \cf3 name property
\f1\i0 \cf2  \cf4 sort type\cf2  \cf6 sortType\cf2  : 
\f2\i \cf3 case sensitive
\f1\i0 \cf2  \cf4 result type\cf2  \cf6 resType\cf2  : 
\f2\i \cf3 paths list
\f1\i0 \cf2 \
	
\f0\b set
\f1\b0  \cf6 resType\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 stringFromRestype\cf2 :\cf6 resType\cf2 \
	
\f0\b if
\f1\b0  \cf6 sortProp\cf2  = 
\f2\i \cf3 name property
\f1\i0 \cf2  
\f0\b or
\f1\b0  \cf6 sortProp\cf2  = 
\f2\i \cf3 extension property
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b if
\f1\b0  \cf6 sortType\cf2  = 
\f2\i \cf3 case sensitive
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 sortStyle\cf2  
\f0\b to
\f1\b0  "localizedCompare:"\
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 sortType\cf2  = 
\f2\i \cf3 Finder like
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 sortStyle\cf2  
\f0\b to
\f1\b0  "localizedStandardCompare:"\
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 sortType\cf2  = 
\f2\i \cf3 case insensitive
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 sortStyle\cf2  
\f0\b to
\f1\b0  "localizedCaseInsensitiveCompare:"\
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 sortType\cf2  = 
\f2\i \cf3 fixed case insensitive
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 sortStyle\cf2  
\f0\b to
\f1\b0  "caseInsensitiveCompare:"\
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 sortType\cf2  = 
\f2\i \cf3 fixed case sensitive
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 sortStyle\cf2  
\f0\b to
\f1\b0  "compare:"\
		
\f0\b else
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 sortStyle\cf2  
\f0\b to
\f1\b0  "localizedCompare:"\
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
		
\f0\b return
\f1\b0  (
\f0\b my
\f1\b0  \cf7 sortByNameOrExtensionFilesOrPaths\cf2 :\cf6 listOfFilesOrPaths\cf2  \cf7 lowToHigh\cf2 :\cf6 ascendFlag\cf2  \cf7 sortingStyle\cf2 :\cf6 sortStyle\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2  \cf7 byExtension\cf2 :(\cf6 sortProp\cf2  = 
\f2\i \cf3 extension property
\f1\i0 \cf2 ))\
	
\f0\b else
\f1\b0 \
		
\f0\b if
\f1\b0  \cf6 sortProp\cf2  = 
\f2\i \cf3 modification property
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 sortProp\cf2  
\f0\b to
\f1\b0  "mod"\
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 sortProp\cf2  = 
\f2\i \cf3 added property
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 sortProp\cf2  
\f0\b to
\f1\b0  "add"\
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 sortProp\cf2  = 
\f2\i \cf3 created property
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 sortProp\cf2  
\f0\b to
\f1\b0  "cre"\
		
\f0\b else
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 sortProp\cf2  
\f0\b to
\f1\b0  "las"\
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
		
\f0\b return
\f1\b0  (
\f0\b my
\f1\b0  \cf7 sortFilesOrPaths\cf2 :\cf6 listOfFilesOrPaths\cf2  \cf7 byProperty\cf2 :\cf6 sortProp\cf2  \cf7 lowToHigh\cf2 :\cf6 ascendFlag\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2 )\
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \

\f0\b end
\f1\b0  
\f0\b \cf4 sort objects
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 objects of
\f1\b0 \cf2  \cf6 aFileOrPath\cf2  \cf4 searching subfolders\cf2  \cf6 recurseFlag\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2  \cf4 include invisible items\cf2  \cf6 incInvis\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2  \cf4 include folders\cf2  \cf6 incFolders\cf2  : 
\f2\i \cf3 true
\f1\i0 \cf2  \cf4 include files\cf2  \cf6 incFiles\cf2  : 
\f2\i \cf3 true
\f1\i0 \cf2  \cf4 result type\cf2  \cf6 resType\cf2  : 
\f2\i \cf3 paths list
\f1\i0 \cf2 \
	
\f0\b set
\f1\b0  \cf6 resType\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 stringFromRestype\cf2 :\cf6 resType\cf2 \
	
\f0\b if
\f1\b0  \cf6 recurseFlag\cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 theResult\cf2  
\f0\b to
\f1\b0  (
\f0\b my
\f1\b0  \cf7 entireContentsOf\cf2 :\cf6 aFileOrPath\cf2  \cf7 includeInvisibles\cf2 :\cf6 incInvis\cf2  \cf7 includeFiles\cf2 :\cf6 incFiles\cf2  \cf7 includeFolders\cf2 :\cf6 incFolders\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2 )\
	
\f0\b else
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 theResult\cf2  
\f0\b to
\f1\b0  (
\f0\b my
\f1\b0  \cf7 contentsOf\cf2 :\cf6 aFileOrPath\cf2  \cf7 includeInvisibles\cf2 :\cf6 incInvis\cf2  \cf7 includeFiles\cf2 :\cf6 incFiles\cf2  \cf7 includeFolders\cf2 :\cf6 incFolders\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2 )\
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \

\f0\b end
\f1\b0  
\f0\b \cf4 objects of
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 exists object
\f1\b0 \cf2  \cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 aURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b return
\f1\b0  (\cf6 aURL's\cf2  \cf7 checkResourceIsReachableAndReturnError\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 )) 
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 exists object
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 object is folder
\f1\b0 \cf2  \cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 aURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	\cf5 -- is it a directory?\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theValue\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 aURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :\cf6 NSURLIsDirectoryKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theValue\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		\cf5 -- is it a package?\cf2 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theValue\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 aURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :\cf6 NSURLIsPackageKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
		
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 theValue\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b return
\f1\b0  
\f2\i \cf3 true
\f1\i0 \cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b return
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 object is folder
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 parse object
\f1\b0 \cf2  \cf6 aFileOrPath\cf2  \cf4 HFS results\cf2  \cf6 useHFS\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2 \
	
\f0\b set
\f1\b0  \cf6 theURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theExt\cf2  
\f0\b to
\f1\b0  \cf6 theURL's\cf2  \cf7 pathExtension\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 folderPath\cf2  
\f0\b to
\f1\b0  \cf6 theURL's\cf2  \cf7 path\cf2 ()'s \cf7 stringByDeletingLastPathComponent\cf2 ()\
	
\f0\b if
\f1\b0  \cf6 useHFS\cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 folderName\cf2  
\f0\b to
\f1\b0  \cf6 folderPath's\cf2  \cf7 lastPathComponent\cf2 ()'s \cf7 stringByReplacingOccurrencesOfString\cf2 :":" \cf7 withString\cf2 :"/"\
		
\f0\b set
\f1\b0  \cf6 folderPath\cf2  
\f0\b to
\f1\b0  ((
\f2\i \cf4 POSIX file
\f1\i0 \cf2  (\cf6 folderPath\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )) 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
		
\f0\b if
\f1\b0  \cf6 folderPath\cf2  
\f0\b does not
\f1\b0  
\f0\b end
\f1\b0  
\f0\b with
\f1\b0  ":" 
\f0\b then
\f1\b0  
\f0\b set
\f1\b0  \cf6 folderPath\cf2  
\f0\b to
\f1\b0  \cf6 folderPath\cf2  & ":"\
		
\f0\b set
\f1\b0  \cf6 theName\cf2  
\f0\b to
\f1\b0  \cf6 theURL's\cf2  \cf7 lastPathComponent\cf2 ()'s \cf7 stringByReplacingOccurrencesOfString\cf2 :":" \cf7 withString\cf2 :"/"\
	
\f0\b else
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 folderName\cf2  
\f0\b to
\f1\b0  \cf6 folderPath's\cf2  \cf7 lastPathComponent\cf2 ()\
		
\f0\b set
\f1\b0  \cf6 theName\cf2  
\f0\b to
\f1\b0  \cf6 theURL's\cf2  \cf7 lastPathComponent\cf2 ()\
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b set
\f1\b0  \cf6 stubName\cf2  
\f0\b to
\f1\b0  \cf6 theName's\cf2  \cf7 stringByDeletingPathExtension\cf2 ()\
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theValue\cf2 \} 
\f0\b to
\f1\b0  (\cf6 theURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :(
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLLocalizedNameKey\cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 ))\
	
\f0\b if
\f1\b0  \cf6 theValue\cf2  
\f0\b is
\f1\b0  
\f0\b not
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b set
\f1\b0  \cf6 theValue\cf2  
\f0\b to
\f1\b0  \cf6 theValue\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theKind\cf2 \} 
\f0\b to
\f1\b0  (\cf6 theURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :(
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLLocalizedTypeDescriptionKey\cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 ))\
	
\f0\b if
\f1\b0  \cf6 theKind\cf2  
\f0\b is
\f1\b0  
\f0\b not
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b set
\f1\b0  \cf6 theKind\cf2  
\f0\b to
\f1\b0  \cf6 theKind\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \
	
\f0\b return
\f1\b0  \{\cf6 full_name\cf2 :\cf6 theName\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 , \cf6 name_extension\cf2 :\cf6 theExt\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 , \cf6 name_stub\cf2 :\cf6 stubName\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 , \cf6 parent_folder_path\cf2 :\cf6 folderPath\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 , \cf6 parent_folder_name\cf2 :\cf6 folderName\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 , \cf6 displayed_name\cf2 :\cf6 theValue\cf2 , \cf6 file_kind\cf2 :\cf6 theKind\cf2 \}\

\f0\b end
\f1\b0  
\f0\b \cf4 parse object
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 compare object
\f1\b0 \cf2  \cf6 fileOrPathA\cf2  \cf4 to object\cf2  \cf6 fileOrPathB\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 contentsOf\cf2 :\cf6 fileOrPathA\cf2  \cf7 equalsContentsOf\cf2 :\cf6 fileOrPathB\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 compare object
\f1\b0 \cf2 \
\
\cf5 -- You can provide POSIX or HFS paths, files, or aliases to these handlers. POSIX paths beginning with ~ will be expanded.\cf2 \
\
\cf5 -- Duplicates a file or folder. The new name has " copy" added before any extension, but if that name is already taken it adds " copy #", where # starts from 2 and increments until success\cf2 \
\cf5 -- Returns the POSIX path of the new file\cf2 \

\f0\b on
\f1\b0  \cf7 duplicateItem\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theDestFolderURL\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |URLByDeletingLastPathComponent|\cf2 ()\
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 copyURL\cf2 :\cf6 theSourceURL\cf2  \cf7 uniquelyToFolderURL\cf2 :\cf6 theDestFolderURL\cf2 \

\f0\b end
\f1\b0  \cf7 duplicateItem\cf7 :\cf2 \
\
\cf5 -- Copies a file or folder, replacing an existing file or folder if you wish. The destination is that of the destination parent folder; the original item's name will be used. Returns true/false.\cf2 \

\f0\b on
\f1\b0  \cf7 copyItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 intoFolder\cf2 :\cf6 folderOrPath\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 destName\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |lastPathComponent|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 theFolderURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theFolderURL's\cf2  \cf7 URLByAppendingPathComponent\cf2 :\cf6 destName\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 copyFromURL\cf2 :\cf6 theSourceURL\cf2  \cf7 toURL\cf2 :\cf6 theDestURL\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \

\f0\b end
\f1\b0  \cf7 copyItem\cf7 :\cf7 intoFolder\cf7 :\cf7 withReplacing\cf7 :\cf2 \
\
\cf5 -- Moves a file or folder, replacing an existing file or folder if you wish. The destination is that of the destination folder; the original item's name will be used\cf2 \

\f0\b on
\f1\b0  \cf7 moveItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 intoFolder\cf2 :\cf6 folderOrPath\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 destName\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |lastPathComponent|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 theFolderURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theFolderURL's\cf2  \cf7 URLByAppendingPathComponent\cf2 :\cf6 destName\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 moveFromURL\cf2 :\cf6 theSourceURL\cf2  \cf7 toURL\cf2 :\cf6 theDestURL\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \

\f0\b end
\f1\b0  \cf7 moveItem\cf7 :\cf7 intoFolder\cf7 :\cf7 withReplacing\cf7 :\cf2 \
\
\cf5 -- Renames a file or folder. If an item with the new name exists, generates an error\cf2 \

\f0\b on
\f1\b0  \cf7 renameItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 newName\cf2 :\cf6 proposedName\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 destName\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |lastPathComponent|\cf2 ()\
	
\f0\b if
\f1\b0  
\f2\i \cf4 class
\f1\i0 \cf2  
\f0\b of
\f1\b0  \cf6 proposedName\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b set
\f1\b0  \cf6 proposedName\cf2  
\f0\b to
\f1\b0  \cf6 NSString's\cf2  \cf7 stringWithString\cf2 :\cf6 proposedName\cf2 \
	
\f0\b set
\f1\b0  \cf6 proposedName\cf2  
\f0\b to
\f1\b0  \cf6 proposedName's\cf2  \cf7 stringByReplacingOccurrencesOfString\cf2 :"/" \cf7 withString\cf2 :":"\
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |URLByDeletingLastPathComponent|\cf2 ()'s \cf7 URLByAppendingPathComponent\cf2 :\cf6 proposedName\cf2 \
	
\f0\b my
\f1\b0  \cf7 moveFromURL\cf2 :\cf6 theSourceURL\cf2  \cf7 toURL\cf2 :\cf6 theDestURL\cf2  \cf7 withReplacing\cf2 :
\f2\i \cf3 false
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 renameItem\cf7 :\cf7 newName\cf7 :\cf2 \
\
\cf5 -- Deletes a file instantly (it does not move it to the trash, and can't be undone). For safety's sake, it errors if passed a folder\cf2 \

\f0\b on
\f1\b0  \cf7 deleteFile\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 isDirectory\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :(\cf6 NSURLIsDirectoryKey\cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 isDirectory\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 isPackage\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :(\cf6 NSURLIsPackageKey\cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
		
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
		
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 isPackage\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  "Item is a directory, not a file" \cf4 number\cf2  -10000\
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b set
\f1\b0  \cf6 theFileManager\cf2  
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()\
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theFileManager's\cf2  \cf7 removeItemAtURL\cf2 :\cf6 theSourceURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\

\f0\b end
\f1\b0  \cf7 deleteFile\cf7 :\cf2 \
\
\cf5 -- Deletes a file or folder instantly (it does not move it to the trash, and can't be undone). For safety's sake, use the above method unless you really mean to delete a folder\cf2 \

\f0\b on
\f1\b0  \cf7 deleteItem\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theFileManager\cf2  
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()\
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theFileManager's\cf2  \cf7 removeItemAtURL\cf2 :\cf6 theSourceURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\

\f0\b end
\f1\b0  \cf7 deleteItem\cf7 :\cf2 \
\
\cf5 -- Moves a file or folder to the trash\cf2 \
\cf5 -- Returns the POSIX path of the trashed file\cf2 \

\f0\b on
\f1\b0  \cf7 trashItem\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theFileManager\cf2  
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()\
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 destURL\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theFileManager's\cf2  \cf7 trashItemAtURL\cf2 :\cf6 theSourceURL\cf2  \cf7 resultingItemURL\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b return
\f1\b0  \cf6 destURL's\cf2  \cf7 path\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 trashItem\cf7 :\cf2 \
\
\cf5 -- Copies a file or folder, replacing an existing file or folder if you wish. The destination must include the new item's name. Returns true/false.\cf2 \

\f0\b on
\f1\b0  \cf7 copyItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 toMake\cf2 :\cf6 destFileOrPath\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 destFileOrPath\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 copyFromURL\cf2 :\cf6 theSourceURL\cf2  \cf7 toURL\cf2 :\cf6 theDestURL\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \

\f0\b end
\f1\b0  \cf7 copyItem\cf7 :\cf7 toMake\cf7 :\cf7 withReplacing\cf7 :\cf2 \
\
\cf5 -- Copies a file or folder to a folder. If a file or folder of the same name already exists, it adds " copy" to the name before the extension, and if that name is taken it adds " copy-#", where # starts from 1 and increments until success\cf2 \
\cf5 -- Returns the POSIX path of the new file\cf2 \

\f0\b on
\f1\b0  \cf7 copyItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 uniquelyToFolder\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theDestFolderURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 copyURL\cf2 :\cf6 theSourceURL\cf2  \cf7 uniquelyToFolderURL\cf2 :\cf6 theDestFolderURL\cf2 \

\f0\b end
\f1\b0  \cf7 copyItem\cf7 :\cf7 uniquelyToFolder\cf7 :\cf2 \
\
\cf5 -- Moves a file or folder, replacing an existing file or folder if you wish. The destination must include the file's name, which does not have to match the original\cf2 \

\f0\b on
\f1\b0  \cf7 moveItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 toMake\cf2 :\cf6 destFileOrPath\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 destFileOrPath\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 moveFromURL\cf2 :\cf6 theSourceURL\cf2  \cf7 toURL\cf2 :\cf6 theDestURL\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \

\f0\b end
\f1\b0  \cf7 moveItem\cf7 :\cf7 toMake\cf7 :\cf7 withReplacing\cf7 :\cf2 \
\
\cf5 -- Moves a file or folder to a folder. If an item of the same name already exists, it adds " copy" to the name before the extension, and if that name is taken it adds " copy-#", where # starts from 2 and increments until success\cf2 \
\cf5 -- Returns the new POSIX path of the file\cf2 \

\f0\b on
\f1\b0  \cf7 moveItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 uniquelyToFolder\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 destName\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |lastPathComponent|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 destNameLessExt\cf2  
\f0\b to
\f1\b0  \cf6 destName's\cf2  \cf7 |stringByDeletingPathExtension|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 theExtension\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |pathExtension|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 theFolderURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theFolderURL's\cf2  \cf7 URLByAppendingPathComponent\cf2 :\cf6 destName\cf2 \
	
\f0\b set
\f1\b0  \cf6 theFileManager\cf2  
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 i\cf2  
\f0\b to
\f1\b0  0\
	
\f0\b repeat
\f1\b0 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 theFileManager's\cf2  \cf7 moveItemAtURL\cf2 :\cf6 theSourceURL\cf2  \cf7 toURL\cf2 :\cf6 theDestURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
		
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b exit
\f1\b0  
\f0\b repeat
\f1\b0 \
		
\f0\b if
\f1\b0  \cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2  = 516 
\f0\b then
\f1\b0  \cf5 -- 516 = NSFileWriteFileExistsError; it already exists, so change name\cf2 \
			
\f0\b if
\f1\b0  \cf6 i\cf2  = 0 
\f0\b then
\f1\b0 \
				
\f0\b set
\f1\b0  \cf6 proposedName\cf2  
\f0\b to
\f1\b0  (\cf6 destNameLessExt's\cf2  \cf7 stringByAppendingString\cf2 :\cf6 copyString\cf2 )'s \cf7 stringByAppendingPathExtension\cf2 :\cf6 theExtension\cf2 \
			
\f0\b else
\f1\b0 \
				
\f0\b set
\f1\b0  \cf6 proposedName\cf2  
\f0\b to
\f1\b0  (\cf6 destNameLessExt's\cf2  \cf7 stringByAppendingString\cf2 :(\cf6 copyString\cf2  & \cf3 space\cf2  & \cf6 i\cf2 ))'s \cf7 stringByAppendingPathExtension\cf2 :\cf6 theExtension\cf2 \
			
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theFolderURL's\cf2  \cf7 URLByAppendingPathComponent\cf2 :\cf6 proposedName\cf2 \
			
\f0\b set
\f1\b0  \cf6 i\cf2  
\f0\b to
\f1\b0  \cf6 i\cf2  + 1\
		
\f0\b else
\f1\b0  \cf5 -- an error other than file already exists, so return error\cf2 \
			
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b repeat
\f1\b0 \
	
\f0\b return
\f1\b0  \cf6 theDestURL's\cf2  \cf7 path\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 moveItem\cf7 :\cf7 uniquelyToFolder\cf7 :\cf2 \
\
\cf5 -- Creates a new folder. There is no error if the folder already exists, and it will also create intermediate folders if required\cf2 \

\f0\b on
\f1\b0  \cf7 createFolder\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theFolderURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theFileManager\cf2  
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()\
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theFileManager's\cf2  \cf7 createDirectoryAtURL\cf2 :\cf6 theFolderURL\cf2  \cf7 withIntermediateDirectories\cf2 :
\f2\i \cf3 true
\f1\i0 \cf2  \cf7 attributes\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b return
\f1\b0  \cf6 theFolderURL's\cf2  \cf7 path\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 createFolder\cf7 :\cf2 \
\
\cf5 -- Creates a new folder. There is no error if the folder already exists, and it will also create intermediate folders if required\cf2 \

\f0\b on
\f1\b0  \cf7 createFolderNamed\cf2 :\cf6 proposedName\cf2  \cf7 inFolder\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theFolderURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b if
\f1\b0  
\f2\i \cf4 class
\f1\i0 \cf2  
\f0\b of
\f1\b0  \cf6 proposedName\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b set
\f1\b0  \cf6 proposedName\cf2  
\f0\b to
\f1\b0  \cf6 NSString's\cf2  \cf7 stringWithString\cf2 :\cf6 proposedName\cf2 \
	
\f0\b if
\f1\b0  (\cf6 proposedName's\cf2  \cf7 rangeOfString\cf2 :":")'s \cf7 |length|\cf2 () > 0 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  "Folder names cannot include the character '/'."\
	
\f0\b set
\f1\b0  \cf6 proposedName\cf2  
\f0\b to
\f1\b0  \cf6 proposedName's\cf2  \cf7 stringByReplacingOccurrencesOfString\cf2 :"/" \cf7 withString\cf2 :":"\
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theFolderURL's\cf2  \cf7 URLByAppendingPathComponent\cf2 :\cf6 proposedName\cf2 \
	
\f0\b set
\f1\b0  \cf6 theFileManager\cf2  
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()\
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theFileManager's\cf2  \cf7 createDirectoryAtURL\cf2 :\cf6 theDestURL\cf2  \cf7 withIntermediateDirectories\cf2 :
\f2\i \cf3 true
\f1\i0 \cf2  \cf7 attributes\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b return
\f1\b0  \cf6 theDestURL's\cf2  \cf7 path\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 createFolderNamed\cf7 :\cf7 inFolder\cf7 :\cf2 \
\
\cf5 -- Creates an alias file at the provided path\cf2 \

\f0\b on
\f1\b0  \cf7 createAlias\cf2 :\cf6 aFileOrPath\cf2  \cf7 pointingTo\cf2 :\cf6 originalFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theAliasURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 originalURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 originalFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theData\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 originalURL's\cf2  \cf7 bookmarkDataWithOptions\cf2 :1024 \cf7 includingResourceValuesForKeys\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 ) \cf7 relativeToURL\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf5 -- 1024 = NSURLBookmarkCreationSuitableForBookmarkFile\cf2 \
	
\f0\b if
\f1\b0  \cf6 theData\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 |NSURL|'s\cf2  \cf7 writeBookmarkData\cf2 :\cf6 theData\cf2  \cf7 toURL\cf2 :\cf6 theAliasURL\cf2  \cf7 options\cf2 :0 \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\

\f0\b end
\f1\b0  \cf7 createAlias\cf7 :\cf7 pointingTo\cf7 :\cf2 \
\
\cf5 -- Returns the POSIX path of the original file an alias points to\cf2 \

\f0\b on
\f1\b0  \cf7 originalFromAlias\cf2 :\cf6 aFileOrPath\cf2  \cf7 asFile\cf2 :\cf6 fileFlag\cf2 \
	
\f0\b set
\f1\b0  \cf6 theAliasURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theData\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 |NSURL|'s\cf2  \cf7 bookmarkDataWithContentsOfURL\cf2 :\cf6 theAliasURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theData\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b set
\f1\b0  \cf6 theDict\cf2  
\f0\b to
\f1\b0  \cf6 |NSURL|'s\cf2  \cf7 resourceValuesForKeys\cf2 :\{\cf6 NSURLPathKey\cf2 \} \cf7 fromBookmarkData\cf2 :\cf6 theData\cf2 \
	
\f0\b set
\f1\b0  \cf6 thePath\cf2  
\f0\b to
\f1\b0  \cf6 theDict's\cf2  \cf7 objectForKey\cf2 :(\cf6 NSURLPathKey\cf2 )\
	
\f0\b considering
\f1\b0  
\f2\i \cf3 numeric strings
\f1\i0 \cf2 \
		
\f0\b if
\f1\b0  \cf6 fileFlag\cf2  
\f0\b and
\f1\b0  \cf3 AppleScript's\cf2  
\f2\i \cf4 version
\f1\i0 \cf2  > "2.4" 
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 originalURL\cf2  
\f0\b to
\f1\b0  \cf6 |NSURL|'s\cf2  \cf7 fileURLWithPath\cf2 :\cf6 thePath\cf2 \
			
\f0\b return
\f1\b0  \cf6 originalURL\cf2  
\f0\b as
\f1\b0  \'ab
\f2\i \cf4 class
\f1\i0 \cf2  furl\'bb\
		
\f0\b else
\f1\b0 \
			
\f0\b return
\f1\b0  \cf6 thePath\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b considering
\f1\b0 \

\f0\b end
\f1\b0  \cf7 originalFromAlias\cf7 :\cf7 asFile\cf7 :\cf2 \
\
\cf5 -- Creates a symbolic link\cf2 \

\f0\b on
\f1\b0  \cf7 createSymlink\cf2 :\cf6 aFileOrPath\cf2  \cf7 pointingTo\cf2 :\cf6 originalFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theLinkURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 originalURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 originalFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()'s \cf7 createSymbolicLinkAtURL\cf2 :\cf6 theLinkURL\cf2  \cf7 withDestinationURL\cf2 :\cf6 originalURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b return
\f1\b0  
\f2\i \cf3 true
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 createSymlink\cf7 :\cf7 pointingTo\cf7 :\cf2 \
\
\cf5 -- Resolves symbolic links in item\cf2 \

\f0\b on
\f1\b0  \cf7 resolveSymlinksIn\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theLinkURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	\cf5 -- check it can be done\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theValue\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theLinkURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :(
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLVolumeSupportsSymbolicLinksKey\cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theValue\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  "This volume does not support symbolic links"\
	
\f0\b return
\f1\b0  \cf6 theLinkURL's\cf2  \cf7 |URLByResolvingSymlinksInPath|\cf2 ()'s \cf7 path\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 resolveSymlinksIn\cf7 :\cf2 \
\
\cf5 -- Creates a hard link\cf2 \

\f0\b on
\f1\b0  \cf7 createHardLink\cf2 :\cf6 aFileOrPath\cf2  \cf7 linkedTo\cf2 :\cf6 originalFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theLinkURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 originalURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 originalFileOrPath\cf2 \
	\cf5 -- check it can be done\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 valuesDict\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 originalURL's\cf2  \cf7 resourceValuesForKeys\cf2 :\{
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLVolumeSupportsHardLinksKey\cf2 , \cf6 NSURLVolumeURLKey\cf2 \} \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 valuesDict\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  ((\cf6 valuesDict's\cf2  \cf7 objectForKey\cf2 :(
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSURLVolumeSupportsHardLinksKey\cf2 )) 
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  "This volume does not support hard links"\
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 volURL\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theLinkURL's\cf2  \cf7 URLByDeletingLastPathComponent\cf2 ()'s \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :(\cf6 NSURLVolumeURLKey\cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 volURL's\cf2  \cf7 isEqual\cf2 :(\cf6 valuesDict's\cf2  \cf7 objectForKey\cf2 :\cf6 NSURLVolumeURLKey\cf2 )) 
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  "Both items must be on the same volume"\
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()'s \cf7 linkItemAtURL\cf2 :\cf6 originalURL\cf2  \cf7 toURL\cf2 :\cf6 theLinkURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b return
\f1\b0  
\f2\i \cf3 true
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 createHardLink\cf7 :\cf7 linkedTo\cf7 :\cf2 \
\
\cf5 -- If the items are files, their contents are compared. If they are folders, it compares the lists of their files and subdirectories (recursively)\cf2 \

\f0\b on
\f1\b0  \cf7 contentsOf\cf2 :\cf6 fileOrPathA\cf2  \cf7 equalsContentsOf\cf2 :\cf6 fileOrPathB\cf2 \
	
\f0\b set
\f1\b0  \cf6 theURLA\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 fileOrPathA\cf2 \
	
\f0\b set
\f1\b0  \cf6 theURLB\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 fileOrPathB\cf2 \
	
\f0\b return
\f1\b0  (\cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()'s \cf7 contentsEqualAtPath\cf2 :(\cf6 theURLA's\cf2  \cf7 path\cf2 ()) \cf7 andPath\cf2 :(\cf6 theURLB's\cf2  \cf7 path\cf2 ())) 
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 contentsOf\cf7 :\cf7 equalsContentsOf\cf7 :\cf2 \
\
\cf5 -- Returns whether the item is a "file", "folder", or "package"\cf2 \

\f0\b on
\f1\b0  \cf7 fileTypeOf\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 isDirectory\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :(\cf6 NSURLIsDirectoryKey\cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 isDirectory\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 isPackage\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :(\cf6 NSURLIsPackageKey\cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
		
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  (\cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
		
\f0\b if
\f1\b0  (\cf6 isPackage\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 ) 
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  "package"\
		
\f0\b else
\f1\b0 \
			
\f0\b return
\f1\b0  "folder"\
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b return
\f1\b0  "file"\

\f0\b end
\f1\b0  \cf7 fileTypeOf\cf7 :\cf2 \
\
\cf5 -- Returns the contents of a folder. If includeFolders is false, only files (including packages) will be returned. If includeFiles is false, only folders will be returned. The resultType parameter takes a string:, "paths" to get POSIX paths, "names" to get just the names, "POSIX names" to get POSIX names (the / character appears as a :), "urls" to get an array of NSURLs, or "files" to get AppleScript file references. The latter is only available under macOS 10.11 and later.\cf2 \

\f0\b on
\f1\b0  \cf7 contentsOf\cf2 :\cf6 aFileOrPath\cf2  \cf7 includeInvisibles\cf2 :\cf6 incInvis\cf2  \cf7 includeFiles\cf2 :\cf6 incFiles\cf2  \cf7 includeFolders\cf2 :\cf6 incFolders\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2 \
	
\f0\b set
\f1\b0  \cf6 theURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theOptions\cf2  
\f0\b to
\f1\b0  0\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 incInvis\cf2  
\f0\b then
\f1\b0  
\f0\b set
\f1\b0  \cf6 theOptions\cf2  
\f0\b to
\f1\b0  4 \cf5 -- NSDirectoryEnumerationSkipsHiddenFiles\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theURLs\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()'s \cf7 contentsOfDirectoryAtURL\cf2 :\cf6 theURL\cf2  \cf7 includingPropertiesForKeys\cf2 :\{\} \cf7 options\cf2 :\cf6 theOptions\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theURLs\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 incFolders\cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 theURLs\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 filesAndPackagesInURLArray\cf2 :\cf6 theURLs\cf2 \
	
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 incFiles\cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 theURLs\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 foldersInURLArray\cf2 :\cf6 theURLs\cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 convertURLs\cf2 :\cf6 theURLs\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2 \

\f0\b end
\f1\b0  \cf7 contentsOf\cf7 :\cf7 includeInvisibles\cf7 :\cf7 includeFiles\cf7 :\cf7 includeFolders\cf7 :\cf7 resultType\cf7 :\cf2 \
\
\cf5 -- Returns the entire contents of a folder and its subfolders. If includeFolders is false, only files (including packages) will be returned. If includeFiles is false, only folders will be returned. The resultType parameter takes a string:, "paths" to get POSIX paths, "names" to get just the names, "POSIX names" to get POSIX names (the / character appears as a :), "urls" to get an array of NSURLs, or "files" to get AppleScript file references. The latter is only available under macOS 10.11 and later.\cf2 \

\f0\b on
\f1\b0  \cf7 entireContentsOf\cf2 :\cf6 aFileOrPath\cf2  \cf7 includeInvisibles\cf2 :\cf6 incInvis\cf2  \cf7 includeFiles\cf2 :\cf6 incFiles\cf2  \cf7 includeFolders\cf2 :\cf6 incFolders\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2 \
	
\f0\b set
\f1\b0  \cf6 theURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theOptions\cf2  
\f0\b to
\f1\b0  2 \cf5 -- NSDirectoryEnumerationSkipsPackageDescendants\cf2 \
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 incInvis\cf2  
\f0\b then
\f1\b0  
\f0\b set
\f1\b0  \cf6 theOptions\cf2  
\f0\b to
\f1\b0  \cf6 theOptions\cf2  + 4 \cf5 -- NSDirectoryEnumerationSkipsHiddenFiles\cf2 \
	
\f0\b set
\f1\b0  \cf6 theEnumerator\cf2  
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()'s \cf7 enumeratorAtURL\cf2 :\cf6 theURL\cf2  \cf7 includingPropertiesForKeys\cf2 :\{\} \cf7 options\cf2 :\cf6 theOptions\cf2  \cf7 errorHandler\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 )\
	
\f0\b set
\f1\b0  \cf6 theURLs\cf2  
\f0\b to
\f1\b0  \cf6 theEnumerator's\cf2  \cf7 allObjects\cf2 ()\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 incFolders\cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 theURLs\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 filesAndPackagesInURLArray\cf2 :\cf6 theURLs\cf2 \
	
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 incFiles\cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 theURLs\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 foldersInURLArray\cf2 :\cf6 theURLs\cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 convertURLs\cf2 :\cf6 theURLs\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2 \

\f0\b end
\f1\b0  \cf7 entireContentsOf\cf7 :\cf7 includeInvisibles\cf7 :\cf7 includeFiles\cf7 :\cf7 includeFolders\cf7 :\cf7 resultType\cf7 :\cf2 \
\
\cf5 -- Sorts a list of files, aliases, paths or URLs by one of the following properties: "modification date", "added date", "creation date", "last access date". Enter your choice as a string (only the first three characters matter).  The resultType parameter takes a string:, "paths" to get POSIX paths, "names" to get just the names, "POSIX names" to get POSIX names (the / character appears as a :), "urls" to get an array of NSURLs, or "files" to get AppleScript file references. The latter is only available under macOS 10.11 and later.\cf2 \

\f0\b on
\f1\b0  \cf7 sortFilesOrPaths\cf2 :\cf6 listOfFilesOrPaths\cf2  \cf7 byProperty\cf2 :\cf6 theProp\cf2  \cf7 lowToHigh\cf2 :\cf6 ascendFlag\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2 \
	
\f0\b set
\f1\b0  \cf6 theCodes\cf2  
\f0\b to
\f1\b0  \{"mod", "add", "cre", "las"\}\
	
\f0\b set
\f1\b0  \cf6 theProperties\cf2  
\f0\b to
\f1\b0  \{\cf6 NSURLContentModificationDateKey\cf2 , \cf6 NSURLAddedToDirectoryDateKey\cf2 , \cf6 NSURLCreationDateKey\cf2 , \cf6 NSURLContentAccessDateKey\cf2 \}\
	
\f0\b set
\f1\b0  \cf6 chosenProp\cf2  
\f0\b to
\f1\b0  \cf6 NSURLContentModificationDateKey\cf2  \cf5 -- default\cf2 \
	
\f0\b repeat
\f1\b0  
\f0\b with
\f1\b0  \cf6 i\cf2  
\f0\b from
\f1\b0  1 
\f0\b to
\f1\b0  
\f0\b \cf4 count
\f1\b0 \cf2  
\f0\b of
\f1\b0  \cf6 theCodes\cf2 \
		
\f0\b if
\f1\b0  \cf6 theProp\cf2  
\f0\b begins with
\f1\b0  
\f2\i \cf4 item
\f1\i0 \cf2  \cf6 i\cf2  
\f0\b of
\f1\b0  \cf6 theCodes\cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 chosenProp\cf2  
\f0\b to
\f1\b0  
\f2\i \cf4 item
\f1\i0 \cf2  \cf6 i\cf2  
\f0\b of
\f1\b0  \cf6 theProperties\cf2 \
			
\f0\b exit
\f1\b0  
\f0\b repeat
\f1\b0 \
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b repeat
\f1\b0 \
	
\f0\b set
\f1\b0  \cf6 allProps\cf2  
\f0\b to
\f1\b0  \{\cf6 chosenProp\cf2 , \cf6 NSURLPathKey\cf2 , \cf6 NSURLNameKey\cf2 \}\
	
\f0\b set
\f1\b0  \cf6 containsURLs\cf2  
\f0\b to
\f1\b0  ((\cf6 NSArray's\cf2  \cf7 arrayWithArray\cf2 :\cf6 listOfFilesOrPaths\cf2 )'s \cf7 firstObject\cf2 ()'s \cf7 isKindOfClass\cf2 :(\cf6 |NSURL|\cf2 )) 
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2 \
	
\f0\b considering
\f1\b0  
\f2\i \cf3 numeric strings
\f1\i0 \cf2 \
		
\f0\b set
\f1\b0  \cf6 includeURLs\cf2  
\f0\b to
\f1\b0  (\cf6 resType\cf2  = "files" 
\f0\b or
\f1\b0  \cf6 resType\cf2  = "urls")\
	
\f0\b end
\f1\b0  
\f0\b considering
\f1\b0 \
	
\f0\b set
\f1\b0  \cf6 theResults\cf2  
\f0\b to
\f1\b0  \cf6 NSMutableArray's\cf2  \cf7 array\cf2 ()\
	
\f0\b repeat
\f1\b0  
\f0\b with
\f1\b0  \cf6 aFile\cf2  
\f0\b in
\f1\b0  \cf6 listOfFilesOrPaths\cf2 \
		
\f0\b if
\f1\b0  \cf6 containsURLs\cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 theValues\cf2  
\f0\b to
\f1\b0  (\cf6 aFile's\cf2  \cf7 resourceValuesForKeys\cf2 :\cf6 allProps\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 ))\
			
\f0\b if
\f1\b0  \cf6 includeURLs\cf2  
\f0\b then
\f1\b0 \
				
\f0\b set
\f1\b0  \cf6 theValues\cf2  
\f0\b to
\f1\b0  \cf6 theValues's\cf2  \cf7 mutableCopy\cf2 ()\
				(\cf6 theValues's\cf2  \cf7 setObject\cf2 :\cf6 aFile\cf2  \cf7 forKey\cf2 :"theURLKey")\
			
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
		
\f0\b else
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 theURL\cf2  
\f0\b to
\f1\b0  (
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFile\cf2 )\
			
\f0\b set
\f1\b0  \cf6 theValues\cf2  
\f0\b to
\f1\b0  (\cf6 theURL's\cf2  \cf7 resourceValuesForKeys\cf2 :\cf6 allProps\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 ))\
			
\f0\b if
\f1\b0  \cf6 includeURLs\cf2  
\f0\b then
\f1\b0 \
				
\f0\b set
\f1\b0  \cf6 theValues\cf2  
\f0\b to
\f1\b0  \cf6 theValues's\cf2  \cf7 mutableCopy\cf2 ()\
				(\cf6 theValues's\cf2  \cf7 setObject\cf2 :\cf6 theURL\cf2  \cf7 forKey\cf2 :"theURLKey")\
			
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
		(\cf6 theResults's\cf2  \cf7 addObject\cf2 :\cf6 theValues\cf2 )\
	
\f0\b end
\f1\b0  
\f0\b repeat
\f1\b0 \
	
\f0\b set
\f1\b0  \cf6 sortDesc\cf2  
\f0\b to
\f1\b0  \cf6 NSSortDescriptor's\cf2  \cf7 sortDescriptorWithKey\cf2 :\cf6 chosenProp\cf2  \cf7 ascending\cf2 :\cf6 ascendFlag\cf2  \cf7 selector\cf2 :"compare:"\
	
\f0\b set
\f1\b0  \cf6 sortDesc2\cf2  
\f0\b to
\f1\b0  \cf6 NSSortDescriptor's\cf2  \cf7 sortDescriptorWithKey\cf2 :\cf6 NSURLNameKey\cf2  \cf7 ascending\cf2 :
\f2\i \cf3 true
\f1\i0 \cf2  \cf7 selector\cf2 :"caseInsensitiveCompare:"\
	\cf6 theResults's\cf2  \cf7 sortUsingDescriptors\cf2 :\{\cf6 sortDesc\cf2 , \cf6 sortDesc2\cf2 \}\
	
\f0\b considering
\f1\b0  
\f2\i \cf3 numeric strings
\f1\i0 \cf2 \
		
\f0\b if
\f1\b0  \cf6 resType\cf2  = "names" 
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  ((((\cf6 theResults's\cf2  \cf7 valueForKey\cf2 :\cf6 NSURLNameKey\cf2 )'s \cf7 componentsJoinedByString\cf2 :(
\f2\i \cf4 character
\f1\i0 \cf2  
\f2\i \cf3 id
\f1\i0 \cf2  0))'s \cf7 stringByReplacingOccurrencesOfString\cf2 :":" \cf7 withString\cf2 :"/")'s \cf7 componentsSeparatedByString\cf2 :(
\f2\i \cf4 character
\f1\i0 \cf2  
\f2\i \cf3 id
\f1\i0 \cf2  0)) 
\f0\b as
\f1\b0  
\f2\i \cf4 list
\f1\i0 \cf2 \
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 resType\cf2  = "POSIX names" 
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  (\cf6 theResults's\cf2  \cf7 valueForKey\cf2 :\cf6 NSURLNameKey\cf2 ) 
\f0\b as
\f1\b0  
\f2\i \cf4 list
\f1\i0 \cf2 \
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  (\cf6 resType\cf2  = "files" 
\f0\b and
\f1\b0  \cf3 AppleScript's\cf2  
\f2\i \cf4 version
\f1\i0 \cf2  > "2.4") 
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  (\cf6 theResults's\cf2  \cf7 valueForKey\cf2 :"theURLKey") 
\f0\b as
\f1\b0  
\f2\i \cf4 list
\f1\i0 \cf2 \
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 resType\cf2  = "urls" 
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  \cf6 theResults's\cf2  \cf7 valueForKey\cf2 :"theURLKey"\
		
\f0\b else
\f1\b0 \
			
\f0\b return
\f1\b0  (\cf6 theResults's\cf2  \cf7 valueForKey\cf2 :\cf6 NSURLPathKey\cf2 ) 
\f0\b as
\f1\b0  
\f2\i \cf4 list
\f1\i0 \cf2 \
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b considering
\f1\b0 \

\f0\b end
\f1\b0  \cf7 sortFilesOrPaths\cf7 :\cf7 byProperty\cf7 :\cf7 lowToHigh\cf7 :\cf7 resultType\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 theFileOrPathInput\cf2 \
	\cf5 -- make it into a Cocoa object for easier comparison\cf2 \
	
\f0\b set
\f1\b0  \cf6 theFileOrPath\cf2  
\f0\b to
\f1\b0  (\cf6 NSArray's\cf2  \cf7 arrayWithObject\cf2 :\cf6 theFileOrPathInput\cf2 )'s \cf7 firstObject\cf2 ()\
	
\f0\b if
\f1\b0  (\cf6 theFileOrPath's\cf2  \cf7 isKindOfClass\cf2 :(\cf6 NSString\cf2 )) 
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b if
\f1\b0  (\cf6 theFileOrPath's\cf2  \cf7 hasPrefix\cf2 :"/") 
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0  \cf5 -- full POSIX path\cf2 \
			
\f0\b return
\f1\b0  \cf6 |NSURL|'s\cf2  \cf7 fileURLWithPath\cf2 :\cf6 theFileOrPath\cf2 \
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  (\cf6 theFileOrPath's\cf2  \cf7 hasPrefix\cf2 :"~") 
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0  \cf5 -- POSIX path needing ~ expansion\cf2 \
			
\f0\b return
\f1\b0  \cf6 |NSURL|'s\cf2  \cf7 fileURLWithPath\cf2 :(\cf6 theFileOrPath's\cf2  \cf7 |stringByExpandingTildeInPath|\cf2 ())\
		
\f0\b else
\f1\b0  \cf5 -- must be HFS path\cf2 \
			
\f0\b return
\f1\b0  \cf6 |NSURL|'s\cf2  \cf7 fileURLWithPath\cf2 :(\cf3 POSIX path\cf2  
\f0\b of
\f1\b0  \cf6 theFileOrPathInput\cf2 )\
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  (\cf6 theFileOrPath's\cf2  \cf7 isKindOfClass\cf2 :(\cf6 |NSURL|\cf2 )) 
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0  \cf5 -- happens with files and aliases in 10.11\cf2 \
		
\f0\b return
\f1\b0  \cf6 theFileOrPath\cf2 \
	
\f0\b else
\f1\b0  \cf5 -- must be a file or alias\cf2 \
		
\f0\b return
\f1\b0  \cf6 |NSURL|'s\cf2  \cf7 fileURLWithPath\cf2 :(\cf3 POSIX path\cf2  
\f0\b of
\f1\b0  \cf6 theFileOrPathInput\cf2 )\
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \

\f0\b end
\f1\b0  \cf7 makeURLFromFileOrPath\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 copyFromURL\cf2 :\cf6 sourceURL\cf2  \cf7 toURL\cf2 :\cf6 destinationURL\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \
	
\f0\b set
\f1\b0  \cf6 theResult\cf2  
\f0\b to
\f1\b0  \cf6 destinationURL's\cf2  \cf7 checkResourceIsReachableAndReturnError\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()'s \cf7 copyItemAtURL\cf2 :\cf6 sourceURL\cf2  \cf7 toURL\cf2 :\cf6 destinationURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
		
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
		
\f0\b return
\f1\b0  
\f2\i \cf3 true
\f1\i0 \cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 replaceFlag\cf2  
\f0\b then
\f1\b0  
\f0\b return
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2 \
	\cf5 -- if we get here, we are replacing\cf2 \
	
\f0\b my
\f1\b0  \cf7 atomicReplaceFromURL\cf2 :\cf6 sourceURL\cf2  \cf7 toURL\cf2 :\cf6 destinationURL\cf2 \
	
\f0\b return
\f1\b0  
\f2\i \cf3 true
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 copyFromURL\cf7 :\cf7 toURL\cf7 :\cf7 withReplacing\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 moveFromURL\cf2 :\cf6 sourceURL\cf2  \cf7 toURL\cf2 :\cf6 destinationURL\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \
	
\f0\b set
\f1\b0  \cf6 theFileManager\cf2  
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 theResult\cf2  
\f0\b to
\f1\b0  \cf6 destinationURL's\cf2  \cf7 checkResourceIsReachableAndReturnError\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 theFileManager's\cf2  \cf7 moveItemAtURL\cf2 :\cf6 sourceURL\cf2  \cf7 toURL\cf2 :\cf6 destinationURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
		
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
		
\f0\b return
\f1\b0  
\f2\i \cf3 true
\f1\i0 \cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 replaceFlag\cf2  
\f0\b then
\f1\b0  
\f0\b return
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2 \
	\cf5 -- if we get here, we are replacing; replace existing file atomically\cf2 \
	
\f0\b my
\f1\b0  \cf7 atomicReplaceFromURL\cf2 :\cf6 sourceURL\cf2  \cf7 toURL\cf2 :\cf6 destinationURL\cf2 \
	\cf6 theFileManager's\cf2  \cf7 removeItemAtURL\cf2 :\cf6 sourceURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 )\
	
\f0\b return
\f1\b0  
\f2\i \cf3 true
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 moveFromURL\cf7 :\cf7 toURL\cf7 :\cf7 withReplacing\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 copyURL\cf2 :\cf6 theSourceURL\cf2  \cf7 uniquelyToFolderURL\cf2 :\cf6 theDestFolderURL\cf2 \
	
\f0\b set
\f1\b0  \cf6 destName\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |lastPathComponent|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theDestFolderURL's\cf2  \cf7 URLByAppendingPathComponent\cf2 :\cf6 destName\cf2 \
	
\f0\b set
\f1\b0  \cf6 destNameLessExt\cf2  
\f0\b to
\f1\b0  \cf6 destName's\cf2  \cf7 |stringByDeletingPathExtension|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 theExtension\cf2  
\f0\b to
\f1\b0  \cf6 destName's\cf2  \cf7 |pathExtension|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 theFileManager\cf2  
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 i\cf2  
\f0\b to
\f1\b0  1\
	
\f0\b repeat
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 theResult\cf2  
\f0\b to
\f1\b0  \cf6 theDestURL's\cf2  \cf7 checkResourceIsReachableAndReturnError\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 )\
		
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 theFileManager's\cf2  \cf7 copyItemAtURL\cf2 :\cf6 theSourceURL\cf2  \cf7 toURL\cf2 :\cf6 theDestURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
			
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
			
\f0\b exit
\f1\b0  
\f0\b repeat
\f1\b0 \
		
\f0\b else
\f1\b0 \
			
\f0\b if
\f1\b0  \cf6 i\cf2  = 1 
\f0\b then
\f1\b0 \
				
\f0\b set
\f1\b0  \cf6 proposedName\cf2  
\f0\b to
\f1\b0  (\cf6 destNameLessExt's\cf2  \cf7 stringByAppendingString\cf2 :\cf6 copyString\cf2 )'s \cf7 stringByAppendingPathExtension\cf2 :\cf6 theExtension\cf2 \
			
\f0\b else
\f1\b0 \
				
\f0\b set
\f1\b0  \cf6 proposedName\cf2  
\f0\b to
\f1\b0  (\cf6 destNameLessExt's\cf2  \cf7 stringByAppendingString\cf2 :(\cf6 copyString\cf2  & \cf3 space\cf2  & \cf6 i\cf2 ))'s \cf7 stringByAppendingPathExtension\cf2 :\cf6 theExtension\cf2 \
			
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
			
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theDestFolderURL's\cf2  \cf7 URLByAppendingPathComponent\cf2 :\cf6 proposedName\cf2 \
			
\f0\b set
\f1\b0  \cf6 i\cf2  
\f0\b to
\f1\b0  \cf6 i\cf2  + 1\
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b repeat
\f1\b0 \
	
\f0\b return
\f1\b0  \cf6 theDestURL's\cf2  \cf7 path\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 copyURL\cf7 :\cf7 uniquelyToFolderURL\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 filesAndPackagesInURLArray\cf2 :\cf6 theURLs\cf2 \
	
\f0\b set
\f1\b0  \cf6 itemURLs\cf2  
\f0\b to
\f1\b0  \cf6 NSMutableArray's\cf2  \cf7 array\cf2 ()\
	
\f0\b repeat
\f1\b0  
\f0\b with
\f1\b0  \cf6 aURL\cf2  
\f0\b in
\f1\b0  \cf6 theURLs\cf2  \cf5 -- is it a directory?\cf2 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theValue\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 aURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :\cf6 NSURLIsDirectoryKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
		
\f0\b if
\f1\b0  \cf6 theValue\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0  \cf5 -- is it a package?\cf2 \
			
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theValue\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 aURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :\cf6 NSURLIsPackageKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
			
\f0\b if
\f1\b0  \cf6 theValue\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
				(\cf6 itemURLs's\cf2  \cf7 addObject\cf2 :\cf6 aURL\cf2 )\
			
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
		
\f0\b else
\f1\b0 \
			(\cf6 itemURLs's\cf2  \cf7 addObject\cf2 :\cf6 aURL\cf2 )\
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b repeat
\f1\b0 \
	
\f0\b return
\f1\b0  \cf6 itemURLs\cf2 \

\f0\b end
\f1\b0  \cf7 filesAndPackagesInURLArray\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 foldersInURLArray\cf2 :\cf6 theURLs\cf2 \
	
\f0\b set
\f1\b0  \cf6 itemURLs\cf2  
\f0\b to
\f1\b0  \cf6 NSMutableArray's\cf2  \cf7 array\cf2 ()\
	
\f0\b repeat
\f1\b0  
\f0\b with
\f1\b0  \cf6 aURL\cf2  
\f0\b in
\f1\b0  \cf6 theURLs\cf2  \cf5 -- is it a directory?\cf2 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theValue\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 aURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :\cf6 NSURLIsDirectoryKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
		
\f0\b if
\f1\b0  \cf6 theValue\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0  \cf5 -- is it a package?\cf2 \
			
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theValue\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 aURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :\cf6 NSURLIsPackageKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
			
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 theValue\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
				(\cf6 itemURLs's\cf2  \cf7 addObject\cf2 :\cf6 aURL\cf2 )\
			
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b repeat
\f1\b0 \
	
\f0\b return
\f1\b0  \cf6 itemURLs\cf2 \

\f0\b end
\f1\b0  \cf7 foldersInURLArray\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 convertURLs\cf2 :\cf6 theURLs\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2 \
	
\f0\b considering
\f1\b0  
\f2\i \cf3 numeric strings
\f1\i0 \cf2 \
		
\f0\b if
\f1\b0  \cf6 resType\cf2  = "names" 
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  ((((\cf6 theURLs's\cf2  \cf7 valueForKey\cf2 :"lastPathComponent")'s \cf7 componentsJoinedByString\cf2 :(
\f2\i \cf4 character
\f1\i0 \cf2  
\f2\i \cf3 id
\f1\i0 \cf2  0))'s \cf7 stringByReplacingOccurrencesOfString\cf2 :":" \cf7 withString\cf2 :"/")'s \cf7 componentsSeparatedByString\cf2 :(
\f2\i \cf4 character
\f1\i0 \cf2  
\f2\i \cf3 id
\f1\i0 \cf2  0)) 
\f0\b as
\f1\b0  
\f2\i \cf4 list
\f1\i0 \cf2 \
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 resType\cf2  = "POSIX names" 
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  (\cf6 theURLs's\cf2  \cf7 valueForKey\cf2 :"lastPathComponent") 
\f0\b as
\f1\b0  
\f2\i \cf4 list
\f1\i0 \cf2 \
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 resType\cf2  = "urls" 
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  \cf6 theURLs\cf2 \
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 resType\cf2  = "files" 
\f0\b and
\f1\b0  \cf3 AppleScript's\cf2  
\f2\i \cf4 version
\f1\i0 \cf2  > "2.4" 
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  \cf6 theURLs\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 list
\f1\i0 \cf2 \
		
\f0\b else
\f1\b0 \
			
\f0\b return
\f1\b0  (\cf6 theURLs's\cf2  \cf7 valueForKey\cf2 :"path") 
\f0\b as
\f1\b0  
\f2\i \cf4 list
\f1\i0 \cf2 \
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b considering
\f1\b0 \

\f0\b end
\f1\b0  \cf7 convertURLs\cf7 :\cf7 resultType\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 stringFromRestype\cf2 :\cf6 resType\cf2 \
	
\f0\b considering
\f1\b0  
\f2\i \cf3 numeric strings
\f1\i0 \cf2 \
		
\f0\b if
\f1\b0  \cf6 resType\cf2  = 
\f2\i \cf3 files list
\f1\i0 \cf2  
\f0\b and
\f1\b0  \cf3 AppleScript's\cf2  
\f2\i \cf4 version
\f1\i0 \cf2  > "2.4" 
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  "files"\
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 resType\cf2  = 
\f2\i \cf3 names list
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  "names"\
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 resType\cf2  = 
\f2\i \cf3 POSIX names list
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  "POSIX names"\
		
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 resType\cf2  = 
\f2\i \cf3 urls array
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
			
\f0\b return
\f1\b0  "urls"\
		
\f0\b else
\f1\b0 \
			
\f0\b return
\f1\b0  "paths"\
		
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b considering
\f1\b0 \
	
\f0\b return
\f1\b0  \cf6 resType\cf2 \

\f0\b end
\f1\b0  \cf7 stringFromRestype\cf7 :\cf2 \
\
\pard\pardeftab480\slleading40\pardirnatural\partightenfactor0
\cf5 -->> 2.1 stuff\cf2 \
\pard\pardeftab480\slleading40\pardirnatural\partightenfactor0
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 copyWithResultItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 intoFolder\cf2 :\cf6 folderOrPath\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2  \cf7 newName\cf2 :\cf6 destName\cf2  \cf7 withReturnPath\cf2 :\cf6 pathFlag\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b if
\f1\b0  \cf6 destName\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b set
\f1\b0  \cf6 destName\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |lastPathComponent|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 theFolderURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theFolderURL's\cf2  \cf7 URLByAppendingPathComponent\cf2 :\cf6 destName\cf2 \
	
\f0\b set
\f1\b0  \cf6 theResult\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 copyFromURL\cf2 :\cf6 theSourceURL\cf2  \cf7 toURL\cf2 :\cf6 theDestURL\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \
	
\f0\b if
\f1\b0  \cf6 pathFlag\cf2  
\f0\b then
\f1\b0 \
		
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b then
\f1\b0  
\f0\b return
\f1\b0  \cf6 theDestURL's\cf2  \cf7 path\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \
		
\f0\b return
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2 \
	
\f0\b else
\f1\b0 \
		
\f0\b return
\f1\b0  \cf3 result\cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \

\f0\b end
\f1\b0  \cf7 copyWithResultItem\cf7 :\cf7 intoFolder\cf7 :\cf7 withReplacing\cf7 :\cf7 newName\cf7 :\cf7 withReturnPath\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 moveWithResultItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 intoFolder\cf2 :\cf6 folderOrPath\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2  \cf7 newName\cf2 :\cf6 destName\cf2  \cf7 withReturnPath\cf2 :\cf6 pathFlag\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b if
\f1\b0  \cf6 destName\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b set
\f1\b0  \cf6 destName\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |lastPathComponent|\cf2 ()\
	
\f0\b set
\f1\b0  \cf6 theFolderURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 folderOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theFolderURL's\cf2  \cf7 URLByAppendingPathComponent\cf2 :\cf6 destName\cf2 \
	
\f0\b set
\f1\b0  \cf6 theResult\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 moveFromURL\cf2 :\cf6 theSourceURL\cf2  \cf7 toURL\cf2 :\cf6 theDestURL\cf2  \cf7 withReplacing\cf2 :\cf6 replaceFlag\cf2 \
	
\f0\b if
\f1\b0  \cf6 pathFlag\cf2  
\f0\b then
\f1\b0 \
		
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b then
\f1\b0  
\f0\b return
\f1\b0  \cf6 theDestURL's\cf2  \cf7 path\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \
		
\f0\b return
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2 \
	
\f0\b else
\f1\b0 \
		
\f0\b return
\f1\b0  \cf3 result\cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \

\f0\b end
\f1\b0  \cf7 moveWithResultItem\cf7 :\cf7 intoFolder\cf7 :\cf7 withReplacing\cf7 :\cf7 newName\cf7 :\cf7 withReturnPath\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 renameWithResultItem\cf2 :\cf6 aFileOrPath\cf2  \cf7 newName\cf2 :\cf6 proposedName\cf2 \
	
\f0\b set
\f1\b0  \cf6 theSourceURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFileOrPath\cf2 \
	
\f0\b set
\f1\b0  \cf6 destName\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |lastPathComponent|\cf2 ()\
	
\f0\b if
\f1\b0  
\f2\i \cf4 class
\f1\i0 \cf2  
\f0\b of
\f1\b0  \cf6 proposedName\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b set
\f1\b0  \cf6 proposedName\cf2  
\f0\b to
\f1\b0  \cf6 NSString's\cf2  \cf7 stringWithString\cf2 :\cf6 proposedName\cf2 \
	
\f0\b set
\f1\b0  \cf6 proposedName\cf2  
\f0\b to
\f1\b0  \cf6 proposedName's\cf2  \cf7 stringByReplacingOccurrencesOfString\cf2 :"/" \cf7 withString\cf2 :":"\
	
\f0\b set
\f1\b0  \cf6 theDestURL\cf2  
\f0\b to
\f1\b0  \cf6 theSourceURL's\cf2  \cf7 |URLByDeletingLastPathComponent|\cf2 ()'s \cf7 URLByAppendingPathComponent\cf2 :\cf6 proposedName\cf2 \
	
\f0\b set
\f1\b0  \cf6 theResult\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 moveFromURL\cf2 :\cf6 theSourceURL\cf2  \cf7 toURL\cf2 :\cf6 theDestURL\cf2  \cf7 withReplacing\cf2 :
\f2\i \cf3 false
\f1\i0 \cf2 \
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b then
\f1\b0  
\f0\b return
\f1\b0  \cf6 theDestURL's\cf2  \cf7 path\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 \
	
\f0\b return
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 renameWithResultItem\cf7 :\cf7 newName\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 atomicReplaceFromURL\cf2 :\cf6 sourceURL\cf2  \cf7 toURL\cf2 :\cf6 destinationURL\cf2 \
	
\f0\b set
\f1\b0  \cf6 theFileManager\cf2  
\f0\b to
\f1\b0  \cf6 NSFileManager's\cf2  \cf7 |defaultManager|\cf2 ()\
	
\f0\b set
\f1\b0  \{\cf6 tempURLDir\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theFileManager's\cf2  \cf7 URLForDirectory\cf2 :99 \cf7 inDomain\cf2 :1 \cf7 appropriateForURL\cf2 :\cf6 destinationURL\cf2  \cf7 create\cf2 :
\f2\i \cf3 true
\f1\i0 \cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf5 --  1 = NSUserDomainMask, 99 = NSItemReplacementDirectory\cf2 \
	
\f0\b if
\f1\b0  \cf6 tempURLDir\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b set
\f1\b0  \cf6 tempDestURL\cf2  
\f0\b to
\f1\b0  \cf6 tempURLDir's\cf2  \cf7 URLByAppendingPathComponent\cf2 :(\cf6 destinationURL's\cf2  \cf7 lastPathComponent\cf2 ())\
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  (\cf6 theFileManager's\cf2  \cf7 copyItemAtURL\cf2 :\cf6 sourceURL\cf2  \cf7 toURL\cf2 :\cf6 tempDestURL\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ))\
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		\cf6 theFileManager's\cf2  \cf7 removeItemAtURL\cf2 :\cf6 tempURLDir\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 )\
		
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 theFileManager's\cf2  \cf7 replaceItemAtURL\cf2 :\cf6 destinationURL\cf2  \cf7 withItemAtURL\cf2 :\cf6 tempDestURL\cf2  \cf7 backupItemName\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 ) \cf7 options\cf2 :1 \cf7 resultingItemURL\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf5 -- 1 = NSFileManagerItemReplacementUsingNewMetadataOnly\cf2 \
	\cf6 theFileManager's\cf2  \cf7 removeItemAtURL\cf2 :\cf6 tempURLDir\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 missing value
\f1\i0 \cf2 )\
	\cf5 -- if replacement failed, return error\cf2 \
	
\f0\b if
\f1\b0  
\f0\b not
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 ) \cf4 number\cf2  (\cf6 theError's\cf2  \cf7 code\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 integer
\f1\i0 \cf2 )\

\f0\b end
\f1\b0  \cf7 atomicReplaceFromURL\cf7 :\cf7 toURL\cf7 :\cf2 \
\
\cf5 -- This handler is called by other handlers\cf2 \

\f0\b on
\f1\b0  \cf7 sortByNameOrExtensionFilesOrPaths\cf2 :\cf6 listOfFilesOrPaths\cf2  \cf7 lowToHigh\cf2 :\cf6 ascendFlag\cf2  \cf7 sortingStyle\cf2 :\cf6 sortStyle\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2  \cf7 byExtension\cf2 :\cf6 extensionFlag\cf2 \
	
\f0\b if
\f1\b0  ((\cf6 NSArray's\cf2  \cf7 arrayWithArray\cf2 :\cf6 listOfFilesOrPaths\cf2 )'s \cf7 firstObject\cf2 ()'s \cf7 isKindOfClass\cf2 :(\cf6 |NSURL|\cf2 )) 
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 theResults\cf2  
\f0\b to
\f1\b0  \cf6 NSMutableArray's\cf2  \cf7 arrayWithArray\cf2 :\cf6 listOfFilesOrPaths\cf2 \
	
\f0\b else
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 theResults\cf2  
\f0\b to
\f1\b0  \cf6 NSMutableArray's\cf2  \cf7 array\cf2 ()\
		
\f0\b repeat
\f1\b0  
\f0\b with
\f1\b0  \cf6 aFile\cf2  
\f0\b in
\f1\b0  \cf6 listOfFilesOrPaths\cf2 \
			(\cf6 theResults's\cf2  \cf7 addObject\cf2 :(
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 aFile\cf2 ))\
		
\f0\b end
\f1\b0  
\f0\b repeat
\f1\b0 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b if
\f1\b0  \cf6 extensionFlag\cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 sortDesc2\cf2  
\f0\b to
\f1\b0  \cf6 NSSortDescriptor's\cf2  \cf7 sortDescriptorWithKey\cf2 :"pathExtension" \cf7 ascending\cf2 :\cf6 ascendFlag\cf2  \cf7 selector\cf2 :\cf6 sortStyle\cf2 \
		
\f0\b set
\f1\b0  \cf6 sortDesc\cf2  
\f0\b to
\f1\b0  \cf6 NSSortDescriptor's\cf2  \cf7 sortDescriptorWithKey\cf2 :"lastPathComponent.stringByDeletingPathExtension" \cf7 ascending\cf2 :\cf6 ascendFlag\cf2  \cf7 selector\cf2 :\cf6 sortStyle\cf2 \
		\cf6 theResults's\cf2  \cf7 sortUsingDescriptors\cf2 :\{\cf6 sortDesc2\cf2 , \cf6 sortDesc\cf2 \}\
	
\f0\b else
\f1\b0 \
		
\f0\b set
\f1\b0  \cf6 sortDesc\cf2  
\f0\b to
\f1\b0  \cf6 NSSortDescriptor's\cf2  \cf7 sortDescriptorWithKey\cf2 :"lastPathComponent" \cf7 ascending\cf2 :\cf6 ascendFlag\cf2  \cf7 selector\cf2 :\cf6 sortStyle\cf2 \
		\cf6 theResults's\cf2  \cf7 sortUsingDescriptors\cf2 :\{\cf6 sortDesc\cf2 \}\
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 convertURLs\cf2 :\cf6 theResults\cf2  \cf7 resultType\cf2 :\cf6 resType\cf2 \

\f0\b end
\f1\b0  \cf7 sortByNameOrExtensionFilesOrPaths\cf7 :\cf7 lowToHigh\cf7 :\cf7 sortingStyle\cf7 :\cf7 resultType\cf7 :\cf7 byExtension\cf7 :\cf2 \
\
\cf5 -- 2.3 stuff\cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 tags of
\f1\b0 \cf2  \cf6 theFileOrPathInput\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 returnTagsFor\cf2 :\cf6 theFileOrPathInput\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 tags of
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 set tags of
\f1\b0 \cf2  \cf6 tagList\cf2  \cf4 to\cf2  \cf6 theFileOrPathInput\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 setTags\cf2 :\cf6 tagList\cf2  \cf7 forItem\cf2 :\cf6 theFileOrPathInput\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 set tags of
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 remove tags from
\f1\b0 \cf2  \cf6 theFileOrPathInput\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 setTags\cf2 :\{\} \cf7 forItem\cf2 :\cf6 theFileOrPathInput\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 remove tags from
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 add tags
\f1\b0 \cf2  \cf6 tagList\cf2  \cf4 to\cf2  \cf6 theFileOrPathInput\cf2 \
	
\f0\b return
\f1\b0  
\f0\b my
\f1\b0  \cf7 addTags\cf2 :\cf6 tagList\cf2  \cf7 forItem\cf2 :\cf6 theFileOrPathInput\cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 add tags
\f1\b0 \cf2 \
\
\cf5 -- Fetch tags; pass a file, alias or POSIX path\cf2 \

\f0\b on
\f1\b0  \cf7 returnTagsFor\cf2 :\cf6 theFileOrPathInput\cf2 \
	
\f0\b set
\f1\b0  \cf6 thisURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 theFileOrPathInput\cf2  \cf5 -- make URL\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theTags\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 thisURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :\cf6 NSURLTagNamesKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theTags\cf2  = 
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b return
\f1\b0  \{\} \cf5 -- because when there are none, it returns missing value\cf2 \
	
\f0\b return
\f1\b0  \cf6 theTags\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 list
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 returnTagsFor\cf7 :\cf2 \
\
\cf5 -- Replace tags; pass a list of the new tags plus a file, alias or POSIX path\cf2 \

\f0\b on
\f1\b0  \cf7 setTags\cf2 :\cf6 tagList\cf2  \cf7 forItem\cf2 :\cf6 theFileOrPathInput\cf2 \
	
\f0\b set
\f1\b0  \cf6 thisURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 theFileOrPathInput\cf2  \cf5 -- make URL\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 thisURL's\cf2  \cf7 setResourceValue\cf2 :\cf6 tagList\cf2  \cf7 forKey\cf2 :\cf6 NSURLTagNamesKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
	
\f0\b return
\f1\b0  
\f2\i \cf3 true
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 setTags\cf7 :\cf7 forItem\cf7 :\cf2 \
\
\cf5 -- Add tags; pass a list of the new tags plus a file, alias or POSIX path\cf2 \

\f0\b on
\f1\b0  \cf7 addTags\cf2 :\cf6 tagList\cf2  \cf7 forItem\cf2 :\cf6 theFileOrPathInput\cf2 \
	
\f0\b set
\f1\b0  \cf6 thisURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 theFileOrPathInput\cf2  \cf5 -- make URL\cf2 \
	\cf5 -- get existing tags\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theTags\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 thisURL's\cf2  \cf7 getResourceValue\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 ) \cf7 forKey\cf2 :\cf6 NSURLTagNamesKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theTags\cf2  \uc0\u8800  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  \cf5 -- make list of old and new tags\cf2 \
		
\f0\b set
\f1\b0  \cf6 tagList\cf2  
\f0\b to
\f1\b0  (\cf6 theTags\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 list
\f1\i0 \cf2 ) & \cf6 tagList\cf2 \
		
\f0\b set
\f1\b0  \cf6 tagList\cf2  
\f0\b to
\f1\b0  (
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSOrderedSet's\cf2  \cf7 orderedSetWithArray\cf2 :\cf6 tagList\cf2 )'s \cf7 |allObjects|\cf2 () \cf5 -- delete any duplicates\cf2 \
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 thisURL's\cf2  \cf7 setResourceValue\cf2 :\cf6 tagList\cf2  \cf7 forKey\cf2 :(\cf6 NSURLTagNamesKey\cf2 ) \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 boolean
\f1\i0 \cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
	
\f0\b return
\f1\b0  
\f2\i \cf3 true
\f1\i0 \cf2 \

\f0\b end
\f1\b0  \cf7 addTags\cf7 :\cf7 forItem\cf7 :\cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 date info for
\f1\b0 \cf2  \cf6 theFileOrPathInput\cf2  \cf4 returning dictionary\cf2  \cf6 dictFlag\cf2  : 
\f2\i \cf3 false
\f1\i0 \cf2 \
	
\f0\b set
\f1\b0  \cf6 thisURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 theFileOrPathInput\cf2  \cf5 -- make URL\cf2 \
	
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 thisURL's\cf2  \cf7 resourceValuesForKeys\cf2 :\{\cf6 NSURLContentModificationDateKey\cf2 , \cf6 NSURLCreationDateKey\cf2 , \cf6 NSURLAddedToDirectoryDateKey\cf2 , \cf6 NSURLContentAccessDateKey\cf2 \} \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b is
\f1\b0  
\f2\i \cf4 missing value
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\
	
\f0\b set
\f1\b0  \cf6 theResult\cf2  
\f0\b to
\f1\b0  \cf6 theResult's\cf2  \cf7 objectsForKeys\cf2 :\{\cf6 NSURLCreationDateKey\cf2 , \cf6 NSURLContentModificationDateKey\cf2 , \cf6 NSURLAddedToDirectoryDateKey\cf2 , \cf6 NSURLContentAccessDateKey\cf2 \} \cf7 notFoundMarker\cf2 :(
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSNull's\cf2  \cf7 null\cf2 ())\
	
\f0\b set
\f1\b0  \cf6 theResult\cf2  
\f0\b to
\f1\b0  
\f2\i \cf3 current application's
\f1\i0 \cf2  \cf6 NSDictionary's\cf2  \cf7 dictionaryWithObjects\cf2 :\cf6 theResult\cf2  \cf7 forKeys\cf2 :\{"creation_date", "modification_date", "added_date", "last_access_date"\}\
	
\f0\b if
\f1\b0  \cf6 dictFlag\cf2  
\f0\b then
\f1\b0  
\f0\b return
\f1\b0  \cf6 theResult\cf2 \
	
\f0\b return
\f1\b0  \cf6 theResult\cf2  
\f0\b as
\f1\b0  
\f2\i \cf4 record
\f1\i0 \cf2 \

\f0\b end
\f1\b0  
\f0\b \cf4 date info for
\f1\b0 \cf2 \
\

\f0\b on
\f1\b0  
\f0\b \cf4 change value for
\f1\b0 \cf2  \cf6 theFileOrPathInput\cf2  \cf4 to\cf2  \cf6 theDate\cf2  \cf4 property name\cf2  \cf6 dateProperty\cf2  : 
\f2\i \cf3 modification property
\f1\i0 \cf2 \
	
\f0\b set
\f1\b0  \cf6 thisURL\cf2  
\f0\b to
\f1\b0  
\f0\b my
\f1\b0  \cf7 makeURLFromFileOrPath\cf2 :\cf6 theFileOrPathInput\cf2  \cf5 -- make URL\cf2 \
	
\f0\b if
\f1\b0  \cf6 dateProperty\cf2  = 
\f2\i \cf3 modification property
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 thisURL's\cf2  \cf7 setResourceValue\cf2 :\cf6 theDate\cf2  \cf7 forKey\cf2 :\cf6 NSURLContentModificationDateKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 dateProperty\cf2  = 
\f2\i \cf3 last access property
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 thisURL's\cf2  \cf7 setResourceValue\cf2 :\cf6 theDate\cf2  \cf7 forKey\cf2 :\cf6 NSURLContentAccessDateKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 dateProperty\cf2  = 
\f2\i \cf3 created property
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 thisURL's\cf2  \cf7 setResourceValue\cf2 :\cf6 theDate\cf2  \cf7 forKey\cf2 :\cf6 NSURLCreationDateKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b else
\f1\b0  
\f0\b if
\f1\b0  \cf6 dateProperty\cf2  = 
\f2\i \cf3 added property
\f1\i0 \cf2  
\f0\b then
\f1\b0 \
		
\f0\b set
\f1\b0  \{\cf6 theResult\cf2 , \cf6 theError\cf2 \} 
\f0\b to
\f1\b0  \cf6 thisURL's\cf2  \cf7 setResourceValue\cf2 :\cf6 theDate\cf2  \cf7 forKey\cf2 :\cf6 NSURLAddedToDirectoryDateKey\cf2  \cf7 |error|\cf2 :(
\f2\i \cf4 reference
\f1\i0 \cf2 )\
	
\f0\b else
\f1\b0 \
		
\f0\b error
\f1\b0  "Invalid date property parameter"\
	
\f0\b end
\f1\b0  
\f0\b if
\f1\b0 \
	
\f0\b if
\f1\b0  \cf6 theResult\cf2  
\f0\b is
\f1\b0  
\f2\i \cf3 false
\f1\i0 \cf2  
\f0\b then
\f1\b0  
\f0\b error
\f1\b0  (\cf6 theError's\cf2  \cf7 |localizedDescription|\cf2 () 
\f0\b as
\f1\b0  
\f2\i \cf4 text
\f1\i0 \cf2 )\

\f0\b end
\f1\b0  
\f0\b \cf4 change value for
\f1\b0 \cf2 \
}